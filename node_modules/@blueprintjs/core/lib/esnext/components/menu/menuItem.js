/*
 * Copyright 2015 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the terms of the LICENSE file distributed with this project.
 */
import classNames from "classnames";
import * as React from "react";
import * as Classes from "../../common/classes";
import { Position } from "../../common/position";
import { DISPLAYNAME_PREFIX } from "../../common/props";
import { Icon } from "../icon/icon";
import { Popover, PopoverInteractionKind } from "../popover/popover";
import { Text } from "../text/text";
import { Menu } from "./menu";
export class MenuItem extends React.PureComponent {
    render() {
        const { active, className, children, disabled, icon, intent, labelElement, multiline, popoverProps, shouldDismissPopover, text, textClassName, tagName: TagName = "a", ...htmlProps } = this.props;
        const hasSubmenu = children != null;
        const intentClass = Classes.intentClass(intent);
        const anchorClasses = classNames(Classes.MENU_ITEM, intentClass, {
            [Classes.ACTIVE]: active,
            [Classes.INTENT_PRIMARY]: active && intentClass == null,
            [Classes.DISABLED]: disabled,
            // prevent popover from closing when clicking on submenu trigger or disabled item
            [Classes.POPOVER_DISMISS]: shouldDismissPopover && !disabled && !hasSubmenu,
        }, className);
        const target = (React.createElement(TagName, Object.assign({}, htmlProps, (disabled ? DISABLED_PROPS : {}), { className: anchorClasses }),
            React.createElement(Icon, { icon: icon }),
            React.createElement(Text, { className: classNames(Classes.FILL, textClassName), ellipsize: !multiline }, text),
            this.maybeRenderLabel(labelElement),
            hasSubmenu && React.createElement(Icon, { icon: "caret-right" })));
        const liClasses = classNames({ [Classes.MENU_SUBMENU]: hasSubmenu });
        return React.createElement("li", { className: liClasses }, this.maybeRenderPopover(target, children));
    }
    maybeRenderLabel(labelElement) {
        const { label, labelClassName } = this.props;
        if (label == null && labelElement == null) {
            return null;
        }
        return (React.createElement("span", { className: classNames(Classes.MENU_ITEM_LABEL, labelClassName) },
            label,
            labelElement));
    }
    maybeRenderPopover(target, children) {
        if (children == null) {
            return target;
        }
        const { disabled, popoverProps } = this.props;
        return (React.createElement(Popover, Object.assign({ autoFocus: false, captureDismiss: false, disabled: disabled, enforceFocus: false, hoverCloseDelay: 0, interactionKind: PopoverInteractionKind.HOVER, modifiers: SUBMENU_POPOVER_MODIFIERS, position: Position.RIGHT_TOP, usePortal: false }, popoverProps, { content: React.createElement(Menu, null, children), minimal: true, popoverClassName: classNames(Classes.MENU_SUBMENU, popoverProps.popoverClassName), target: target })));
    }
}
MenuItem.defaultProps = {
    disabled: false,
    multiline: false,
    popoverProps: {},
    shouldDismissPopover: true,
    text: "",
};
MenuItem.displayName = `${DISPLAYNAME_PREFIX}.MenuItem`;
const SUBMENU_POPOVER_MODIFIERS = {
    // 20px padding - scrollbar width + a bit
    flip: { boundariesElement: "viewport", padding: 20 },
    // shift popover up 5px so MenuItems align
    offset: { offset: -5 },
    preventOverflow: { boundariesElement: "viewport", padding: 20 },
};
// props to ignore when disabled
const DISABLED_PROPS = {
    href: undefined,
    onClick: undefined,
    onMouseDown: undefined,
    onMouseEnter: undefined,
    onMouseLeave: undefined,
    tabIndex: -1,
};
//# sourceMappingURL=menuItem.js.map